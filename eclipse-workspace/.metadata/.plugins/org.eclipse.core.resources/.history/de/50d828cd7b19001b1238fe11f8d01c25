package com.hrms.API.steps.practice;

import org.junit.Assert;
import org.junit.Test;
import static io.restassured.RestAssured.*;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;


import static org.hamcrest.Matchers.*;

public class HardcodedExamples {
	/***
	 * REST Assured - Java library specifically developed to automate REST endpoints
	 * 
	 * Given - Preparing your request When - what action will you perform, what type
	 * of call are you making? Then - Verification
	 */
	String baseURI = RestAssured.baseURI = "http://18.232.148.34/syntaxapi/api";
	String token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDM5MjgxNzUsImlzcyI6ImxvY2FsaG9zdCIsImV4cCI6MTYwMzk3MTM3NSwidXNlcklkIjoiMTMwOCJ9.6sK6LuYqKoUfWJ9JyckX6maDXZBOLhJpFZSXeOMs4QQ";
	static String employeeID;

	 @Test
	public void sampleTest() {
		/** BaseURI for all endPoints */
		// RestAssured.baseURI = "http://18.232.148.34/syntaxapi/api";
		/** JWT */

		/** Preparing request for /getOneEmployee.php */
		/** Using.log.all to print out everything being sent with the request */
		RequestSpecification preparingGetOneEmployeeRequest = given().header("Authorization", token)
				.header("Content-Type", "application/json").queryParam("employee_id", "3695");
		/** Making call to /getOneEmployee.php */
		Response getOneEmployeeResponse = preparingGetOneEmployeeRequest.when().get("/getOneEmployee.php");
		/** One way to print response object */
		// System.out.println(getOneEmployeeResponse.asString());
		/** Second way using rest assured prettyPrint() */
		getOneEmployeeResponse.prettyPrint();
		/** Using assertThat() to verify status code */
		getOneEmployeeResponse.then().assertThat().statusCode(200);

	}

	@Test
	public void aPOSTcreatEmployee() {

		/** Preparing request for creating an employee */
		RequestSpecification createEmployeeRequest = given().header("Authorization", token)
				.header("Content-Type", "application/json").body("{\r\n"
						+ "  \"emp_firstname\": \"Rohit\",\r\n"
						+ "  \"emp_lastname\": \"Sondhi\",\r\n"
						+ "  \"emp_middle_name\": \"n/a\",\r\n"
						+ "  \"emp_gender\": \"M\",\r\n"
						+ "  \"emp_birthday\": \"2000-10-18\",\r\n"
						+ "  \"emp_status\": \"Employee\",\r\n"
						+ "  \"emp_job_title\": \"Cloud Architect\"\r\n"
						+ "}");
		/**making call to /createEmployee.php*/
		Response createEmployeeResponse = createEmployeeRequest.when().post("/createEmployee.php");

		/** printing response */
		createEmployeeResponse.prettyPrint();
		/**
		 * Using jsonPath() to view hte response body which lets us get the employee ID
		 * we are storing the employeeID as a static global variable to be able to use
		 * with other calls
		 */
		employeeID = createEmployeeResponse.jsonPath().getString("Employee[0].employee_id");
		System.out.println(employeeID);
		/** Verifying status code is 201 */
		createEmployeeResponse.then().assertThat().statusCode(201);
		/**
		 * Verifying response body "Message" is paired with "Entry Created"; equalTo()
		 * method comes from static HamCrest package - NEED TO IMPORT MANUALLY import
		 * static static org.hamcrest.Matchers.*;
		 */
		createEmployeeResponse.then().assertThat().body("Message", equalTo("Entry Created"));
		/** Verifying created employee first name */
		createEmployeeResponse.then().assertThat().body("Employee[0].emp_firstname", equalTo("mohammad"));
		/** Verifying server Apache/2.4.39 (Win64) PHP/7.2.18 */
		createEmployeeResponse.then().header("server", "Apache/2.4.39 (Win64) PHP/7.2.18");	
}
	@Test 
	public void  bGetcreatesdEmployee() {
		/**preparing request to get created employee*/
		RequestSpecification getCreatedEmployeeRequest = given().header("Content-Type", "application/jason").header("Authorization", token).queryParam("employee_id", employeeID);
		/**Storing response for retrieving created employee */
		Response getCreatedEmpoyeeResponse = getCreatedEmployeeRequest.when().get("/getOneEmployee.php");
		getCreatedEmpoyeeResponse.prettyPrint();
		String empID = getCreatedEmpoyeeResponse.body().jsonPath().getString("employee[0].employee_id");
		
		boolean verifyingEmployeeID = empID.equalsIgnoreCase(employeeID);
		
		Assert.assertTrue(verifyingEmployeeID);
		/**Verifying status code is 200*/
		getCreatedEmpoyeeResponse.then().assertThat().statusCode(200);
	}

}
